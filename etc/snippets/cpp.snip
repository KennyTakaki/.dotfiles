snippet     pd
  std::cout << ${1} << std::endl;

snippet     headerlib
abbr        * @file .h
options     head
    /** 
     * @file `expand("%:r")`.h
     * @brief 
     * @author Kentarou Takaki
     */
    #pragma once
     
    /** 
     * @brief 
     */
    class `expand("%:r")`{
      public:
        `expand("%:r")`(){}
     
        //~~~~~~functions~~~~~~~
     
      private:
     
        //~~~~~~Struct/Enum~~~~~~
     
        //~~~~~~Members~~~~~
     
        //~~~~~~functions~~~~~~~
     
    };

snippet     tk_class_h
abbr        tkabbr
options     head
  /**
  * @file      ${1:`expand("%:r")`}.hpp
  * @brief     クラスの説明
  * @note      特記事項など
  * @author    Kentarou Takaki
  * @copyright ~~~~~~~
  */
  // include guard should be the form of <PROJECT>_<PATH>_<FILE>_H_
  #ifndef ${2:ORGANIZATION_PROJECT_PACKAGE_LIB_CLASSNAME_H___}
  #define $2
  
  //-------------------------------------------------------
  // includes
  //-------------------------------------------------------
  ${3:#include <iostream>}
  //-------------------------------------------------------
  // defines
  //-------------------------------------------------------
  //using new_type = oiginal_type

  //-------------------------------------------------------
  // namespace
  //-------------------------------------------------------
  
  namespace ${4:sei} {
  namespace ${5:project} {
  namespace ${6:package} {
  
  //-------------------------------------------------------
  // public classes
  //-------------------------------------------------------
  
  /**
   * Doxygen: クラス概要
   */
  class $1
  {
    public:
      /**
       * @brief This is Default Constructor
       */
      $1();
      
      /**
       * @brief This is Constructor with param
       * @param input_value
       */
      explicit $1(const $7 & input_val);
  
      /**
       * @brief This is Copy Constructor
       * @param from Instance to copy from
       */
      $1(const $1 &from);

      /**
       * @brief Over Load of operator for Copy Assignment 
       * @param from Instance for copy from
       */
      $1 &operator=(const $1 &from);

      /**
       * @brief Move Constructor : The default setting is delete
       */
      $1($1 &&rhs) noexcept = delete;

      /**
       * @brief Over Load of operator for Move Assignment
       *        The default setting is delete
       */
      $1 &operator=($1 &&rhs) noexcept = delete;

      /**
       * @brief Destructor
       */
      ~$1() = default;
  

      /*public methods*/

      std::string GetprivateMember();

    private:
      /**
       * private member
       */
      ${7:std::string} ${8:privateMember_};
  
  };
  
  
  } // namespace $6
  } // namespace $5
  } // namespace $4
  #endif // include guard

snippet     tk_class_cpp
abbr        tkabbr_class
options     head
  /**
  * @file      ${1:`expand("%:r")`}.cpp
  * @brief     クラスの説明
  * @note      特記事項など
  * @author    Kentarou Takaki @ SEI
  * @copyright ~~~~~~~
  */
  ${0}
  //-------------------------------------------------------
  // includes
  //-------------------------------------------------------
  #include <string>
  //-------------------------------------------------------
  // defines
  //-------------------------------------------------------
  //using new_type = oiginal_type

  //-------------------------------------------------------
  // namespace
  //-------------------------------------------------------
  
  namespace ${4:sei} {
  namespace ${5:project} {
  namespace ${6:package} {
  
  // Default Constructor
  $1::$1()
  {}

  // Constructor with initializer
  $1::$1(consnt std::string & input)
      : privateMember_{input}
  {}

  std::string $1::GetprivateMemberk()
  {return privateMember_;}

  } // namespace $6
  } // namespace $5
  } // namespace $4


snippet     dx_comment
abbr        DoxygenComment
options     head
 /**
 * ... text ...
 */
